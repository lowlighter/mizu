// Imports
import type { rw } from "@libs/typing/types"
import { expandGlob } from "@std/fs"
import { Logger } from "@libs/logger"
import { command } from "@libs/run/command"
import * as YAML from "@std/yaml"
const log = new Logger()

/*** Fill GitHub files with current existing scopes. */
if (import.meta.main) {
  // List scopes
  const scopes = [...await Array.fromAsync<{ name: string }>(Deno.readDir("@mizu"))]
    .concat([{ name: "www" }, { name: "repo" }])
    .filter(({ name }) => !["coverage"].includes(name))
    .map(({ name }) => name)
    .sort()
  // Patch issues templates
  log.info("patching issue templates")
  for await (const { path, name } of expandGlob(".github/ISSUE_TEMPLATE/*.yml")) {
    if (name === "config.yml") {
      continue
    }
    const parsed = YAML.parse(await Deno.readTextFile(path)) as rw
    if (parsed.body.some((field: rw) => field.id === "scope")) {
      parsed.body.find((filed: rw) => filed.id === "scope").attributes.options = scopes
      await Deno.writeTextFile(path, YAML.stringify(parsed))
      await command("deno", ["fmt", path], { stdout: null, stderr: null })
      log.with({ path }).ok("done")
    }
  }
  // Patch pull request labeler
  {
    log.info("patching pull request labeler")
    const path = ".github/labeler.yml"
    const generated = YAML.stringify(Object.fromEntries(scopes.map((scope) => [`scope: ${scope}`, [
      [{ "changed-files": [{ "any-glob-to-any-file": `@mizu/${scope}/**` }] }],
    ]])))
    await Deno.writeTextFile(path, (await Deno.readTextFile(path)).replace(/(## == Autogenerated configuration starts below == ##)[\s\S]*/g, `$1\n\n${generated}`))
    await command("deno", ["fmt", path], { stdout: null, stderr: null })
    log.with({ path }).ok("done")
  }
}
